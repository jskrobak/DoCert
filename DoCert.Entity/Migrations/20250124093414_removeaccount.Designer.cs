// <auto-generated />
using System;
using DoCert.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoCert.Entity.Migrations
{
    [DbContext(typeof(DoCertDbContext))]
    [Migration("20250124093414_removeaccount")]
    partial class removeaccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("DoCert.Model.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FooterText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuerPosition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("LogoPng")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("MailAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MailBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MailSubject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceAndDateTemplate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("StamperPng")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MailAccountId");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("DoCert.Model.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("DonorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("DoCert.Model.Donate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConstantSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DonorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecificSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariableSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("Donates");
                });

            modelBuilder.Entity("DoCert.Model.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CertificateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("IBAN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariableSymbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId")
                        .IsUnique();

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("DoCert.Model.MailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MailAccounts");
                });

            modelBuilder.Entity("Havit.Data.EntityFrameworkCore.Model.DataSeedVersion", b =>
                {
                    b.Property<string>("ProfileName")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("ProfileName")
                        .HasName("PK_DataSeed");

                    b.ToTable("__DataSeed", (string)null);
                });

            modelBuilder.Entity("DoCert.Model.Agenda", b =>
                {
                    b.HasOne("DoCert.Model.MailAccount", "MailAccount")
                        .WithMany()
                        .HasForeignKey("MailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailAccount");
                });

            modelBuilder.Entity("DoCert.Model.Donate", b =>
                {
                    b.HasOne("DoCert.Model.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("DoCert.Model.Donor", b =>
                {
                    b.HasOne("DoCert.Model.Certificate", "Certificate")
                        .WithOne("Donor")
                        .HasForeignKey("DoCert.Model.Donor", "CertificateId");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("DoCert.Model.Certificate", b =>
                {
                    b.Navigation("Donor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
